[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\KHALIF~1\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\KHALIF~1\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (Oracle Corporation Java 11.0.12)
[debug]       Load.loadUnit: plugins took 212.2739ms
[debug]       Load.loadUnit: defsScala took 0.7685ms
[debug] [Loading] Scanning directory C:\Users\Khalifa A BADIANE\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Khalifa A BADIANE\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 52.4696 ms
[debug]           Load.resolveProject(global-plugins) took 124.0549ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Khalifa A BADIANE\.sbt\1.0\plugins, plugins: List(<none>))) took 264.1876ms
[debug] [Loading] Done in C:\Users\Khalifa A BADIANE\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 325.5314ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5133ms
[debug]     Load.loadUnit(file:/C:/Users/Khalifa%20A%20BADIANE/.sbt/1.0/plugins/, ...) took 560.9627ms
[debug]   Load.apply: load took 1075.3672ms
[debug]   Load.apply: resolveProjects took 15.1972ms
[debug]   Load.apply: finalTransforms took 157.3723ms
[debug]   Load.apply: config.delegates took 24.3884ms
[debug]   Load.apply: Def.make(settings)... took 4999.4797ms
[debug]   Load.apply: structureIndex took 300.6075ms
[debug]   Load.apply: mkStreams took 5.922ms
[info] loading global plugins from C:\Users\Khalifa A BADIANE\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 11539.837ms
[debug]           Load.loadUnit: plugins took 80.8425ms
[debug]           Load.loadUnit: defsScala took 0.0071ms
[debug] [Loading] Scanning directory C:\learning_path\Scala\SourceCode\FunctionalDemo\project
[debug]             Load.loadUnit: mkEval took 17.7015ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\learning_path\Scala\SourceCode\FunctionalDemo\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.5605 ms
[info] loading settings for project functionaldemo-build from idea.sbt ...
[debug]               Load.resolveProject(functionaldemo-build) took 4.1837ms
[debug]             Load.loadTransitive: finalizeProject(Project(id functionaldemo-build, base: C:\learning_path\Scala\SourceCode\FunctionalDemo\project, plugins: List(<none>))) took 8.7203ms
[debug] [Loading] Done in C:\learning_path\Scala\SourceCode\FunctionalDemo\project, returning: (functionaldemo-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 6627.663ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.2205ms
[debug]         Load.loadUnit(file:/C:/learning_path/Scala/SourceCode/FunctionalDemo/project/, ...) took 6718.9722ms
[debug]       Load.apply: load took 6721.9545ms
[debug]       Load.apply: resolveProjects took 0.2135ms
[debug]       Load.apply: finalTransforms took 16.6627ms
[debug]       Load.apply: config.delegates took 0.6229ms
[debug]       Load.apply: Def.make(settings)... took 106.9367ms
[debug]       Load.apply: structureIndex took 49.8306ms
[debug]       Load.apply: mkStreams took 0.0038ms
[info] loading project definition from C:\learning_path\Scala\SourceCode\FunctionalDemo\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 9363.1438ms
[debug]     Load.loadUnit: defsScala took 0.0056ms
[debug] [Loading] Scanning directory C:\learning_path\Scala\SourceCode\FunctionalDemo
[debug]       Load.loadUnit: mkEval took 1.6285ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\learning_path\Scala\SourceCode\FunctionalDemo, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.6077 ms
[info] loading settings for project functionaldemo from build.sbt ...
[debug]         Load.resolveProject(functionaldemo) took 66.6187ms
[debug]       Load.loadTransitive: finalizeProject(Project(id functionaldemo, base: C:\learning_path\Scala\SourceCode\FunctionalDemo, plugins: List(<none>))) took 72.1307ms
[debug] [Loading] Done in C:\learning_path\Scala\SourceCode\FunctionalDemo, returning: (functionaldemo)
[debug]     Load.loadUnit: loadedProjectsRaw took 2190.4891ms
[debug]     Load.loadUnit: cleanEvalClasses took 25.2735ms
[debug]   Load.loadUnit(file:/C:/learning_path/Scala/SourceCode/FunctionalDemo/, ...) took 11580.0556ms
[debug] Load.apply: load took 11585.885ms
[debug] Load.apply: resolveProjects took 0.2699ms
[debug] Load.apply: finalTransforms took 42.2128ms
[debug] Load.apply: config.delegates took 2.535ms
[debug] Load.apply: Def.make(settings)... took 130.6871ms
[debug] Load.apply: structureIndex took 36.6531ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to FunctionalDemo (in build file:/C:/learning_path/Scala/SourceCode/FunctionalDemo/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 27873 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 27873, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to FunctionalDemo (in build file:/C:/learning_path/Scala/SourceCode/FunctionalDemo/)
[debug] > Exec(idea-shell, None, None)
